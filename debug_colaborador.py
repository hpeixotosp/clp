#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de debug para testar extra√ß√£o de colaborador
"""

import sys
import re
import backend_pdf_processor

def debug_extract_colaborador():
    """
    Debug da extra√ß√£o de colaborador
    """
    print("=== DEBUG EXTRA√á√ÉO DE COLABORADOR ===")
    
    # Extrair texto do PDF usando OCR
    try:
        processor = backend_pdf_processor.PontoProcessor()
        text = processor.extract_text_with_ocr('cc.pdf')
        print(f"üìù Texto extra√≠do: {len(text)} caracteres")
        print(f"üìù Primeiros 500 caracteres:")
        print(repr(text[:500]))
        print("\n" + "="*50)
        
        # Mostrar linhas do texto
        lines = text.split('\n')[:15]
        print("üìù Primeiras 15 linhas:")
        for i, line in enumerate(lines, 1):
            print(f"  {i:2d}: {repr(line)}")
        print("\n" + "="*50)
        
        # Testar padr√µes de extra√ß√£o de nome
        patterns = [
            # Padr√£o espec√≠fico para o formato do contracheque (nome seguido de n√∫meros)
            r'([A-Z√Å√Ä√Ç√É√â√ä√ç√ì√î√ï√ö√á][A-Z√Å√Ä√Ç√É√â√ä√ç√ì√î√ï√ö√á\s]+)\s+\d{6}\s+\d+',
            # Padr√µes espec√≠ficos para contracheques
            r'(?:nome|colaborador|funcion√°rio|servidor)\s*:?\s*([A-Z√Å√Ä√Ç√É√â√ä√ç√ì√î√ï√ö√á][a-z√°√†√¢√£√©√™√≠√≥√¥√µ√∫√ß\s]+?)(?=\s*(?:CPF|RG|Matr√≠cula|Cargo|Fun√ß√£o))',
            r'Nome\s*:?\s*([A-Z√Å√Ä√Ç√É√â√ä√ç√ì√î√ï√ö√á][a-z√°√†√¢√£√©√™√≠√≥√¥√µ√∫√ß\s]+?)(?=\s*(?:CPF|RG|Matr√≠cula|Cargo|Fun√ß√£o))',
            r'NOME\s*:?\s*([A-Z√Å√Ä√Ç√É√â√ä√ç√ì√î√ï√ö√á][a-z√°√†√¢√£√©√™√≠√≥√¥√µ√∫√ß\s]+?)(?=\s*(?:CPF|RG|Matr√≠cula|Cargo|Fun√ß√£o))',
            # Padr√£o para nomes seguidos de dados pessoais
            r'([A-Z√Å√Ä√Ç√É√â√ä√ç√ì√î√ï√ö√á][a-z√°√†√¢√£√©√™√≠√≥√¥√µ√∫√ß]+(?:\s+[A-Z√Å√Ä√Ç√É√â√ä√ç√ì√î√ï√ö√á][a-z√°√†√¢√£√©√™√≠√≥√¥√µ√∫√ß]+)+)(?=\s*(?:CPF|RG|Matr√≠cula))',
            # Padr√£o mais flex√≠vel para capturar nomes em linhas
            r'^\s*([A-Z√Å√Ä√Ç√É√â√ä√ç√ì√î√ï√ö√á][a-z√°√†√¢√£√©√™√≠√≥√¥√µ√∫√ß]+(?:\s+[A-Z√Å√Ä√Ç√É√â√ä√ç√ì√î√ï√ö√á][a-z√°√†√¢√£√©√™√≠√≥√¥√µ√∫√ß]+)+)\s*$',
            # Padr√£o para nomes ap√≥s palavras-chave
            r'(?:Funcion√°rio|Servidor|Empregado)\s*:?\s*([A-Z√Å√Ä√Ç√É√â√ä√ç√ì√î√ï√ö√á][a-z√°√†√¢√£√©√™√≠√≥√¥√µ√∫√ß\s]+)',
            # Padr√£o espec√≠fico para o texto OCR extra√≠do
            r'([A-Z][A-Z\s]+)\s+\d{6}',
            # Padr√£o para capturar nome antes de n√∫meros
            r'([A-Z][A-Z\s]+?)\s+\d+',
            # Padr√£o mais simples para nomes em mai√∫sculo
            r'\b([A-Z]{2,}(?:\s+[A-Z]{2,})+)\b',
        ]
        
        print("üîç Testando padr√µes de extra√ß√£o:")
        for i, pattern in enumerate(patterns, 1):
            print(f"\n--- Padr√£o {i} ---")
            print(f"Regex: {pattern}")
            
            matches = re.findall(pattern, text, re.IGNORECASE | re.MULTILINE)
            if matches:
                print(f"‚úÖ Encontrou {len(matches)} match(es):")
                for j, match in enumerate(matches[:5], 1):  # Mostrar apenas os primeiros 5
                    print(f"  {j}: '{match}'")
                    
                    # Testar valida√ß√£o
                    name = match.strip() if isinstance(match, str) else match[0].strip()
                    name = re.sub(r'[^A-Za-z√°√†√¢√£√©√™√≠√≥√¥√µ√∫√ß√Å√Ä√Ç√É√â√ä√ç√ì√î√ï√ö√á\s]', '', name)
                    
                    words = name.split()
                    # Remover palavras de 1 caractere no in√≠cio
                    while words and len(words[0]) == 1:
                        words = words[1:]
                    
                    if words:
                        clean_name = ' '.join(words)
                        if len(words) >= 2 and len(clean_name) > 5 and len(clean_name) < 50:
                            if all(len(word) >= 2 for word in words):
                                print(f"    ‚úÖ Nome v√°lido: '{clean_name}'")
                            else:
                                print(f"    ‚ùå Palavras muito curtas: '{clean_name}'")
                        else:
                            print(f"    ‚ùå Nome inv√°lido (palavras: {len(words)}, tamanho: {len(clean_name)}): '{clean_name}'")
                    else:
                        print(f"    ‚ùå Sem palavras v√°lidas")
            else:
                print("‚ùå Nenhum match encontrado")
        
        # Testar busca manual por ADRIANO
        print("\nüîç Buscando especificamente por 'ADRIANO':")
        adriano_matches = re.findall(r'(ADRIANO[^\n]*)', text, re.IGNORECASE)
        if adriano_matches:
            print(f"‚úÖ Encontrou ADRIANO: {adriano_matches}")
        else:
            print("‚ùå ADRIANO n√£o encontrado")
            
        # Buscar por padr√µes de n√∫meros que podem indicar matr√≠cula
        print("\nüîç Buscando padr√µes de matr√≠cula (6 d√≠gitos):")
        matricula_matches = re.findall(r'(\w+[^\d]*)(\d{6})', text)
        if matricula_matches:
            print(f"‚úÖ Encontrou padr√µes de matr√≠cula:")
            for match in matricula_matches[:5]:
                print(f"  Nome: '{match[0].strip()}' | Matr√≠cula: '{match[1]}'")
        else:
            print("‚ùå Nenhum padr√£o de matr√≠cula encontrado")
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    debug_extract_colaborador()
    print("\n=== DEBUG CONCLU√çDO ===")